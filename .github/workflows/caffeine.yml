name: Test Caffeine Language

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Racket
      uses: Bogdanp/setup-racket@v1.11
      with:
        architecture: 'x64'
        distribution: 'full'
        variant: 'CS'
        version: '8.17'
        
    - name: Install review package
      run: raco pkg install --auto review
      
    - name: Run raco check-requires
      run: |
        echo "Checking for unused requires on all Racket files..."
        # Find all .rkt files and run check-requires on each
        find . -name "*.rkt" -type f | while read -r file; do
          echo "Checking requires for: $file"
          raco check-requires "$file"
        done
        
    - name: Run raco review (enforce code quality)
      run: |
        echo "Running code quality checks on all Racket files..."
        # Find all .rkt files and run review on each
        # Allow warnings to pass (|| true) since some warnings are false positives
        find . -name "*.rkt" -type f | while read -r file; do
          echo "Reviewing: $file"
          raco review "$file" || true
        done
        
        echo "Code review completed!"
        
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        racket-version: ['8.17']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Racket
      uses: Bogdanp/setup-racket@v1.11
      with:
        architecture: 'x64'
        distribution: 'full'
        variant: 'CS'
        version: ${{ matrix.racket-version }}
        
    - name: Install caffeine package
      run: |
        cd caffeine
        raco pkg install --auto
        
    - name: Run tests and verify results
      shell: bash
      run: |
        # Capture the test output and exit code
        if output=$(racket test.rkt 2>&1) && echo "$output" | grep -q "0 failure(s) 0 error(s)"; then
          echo "✅ All tests passed successfully on ${{ matrix.os }}!"
          echo "Test output:"
          echo "$output"
          exit 0
        else
          echo "❌ Tests failed on ${{ matrix.os }}!"
          echo "Test output:"
          echo "$output"
          exit 1
        fi 